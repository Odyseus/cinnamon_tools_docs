#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# auto generated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

import os
import sys

from datetime import datetime
from runpy import run_path

root_folder = os.path.realpath(os.path.abspath(os.path.join(
    os.path.normpath(os.path.join(os.path.dirname(__file__), *([".."] * 2))))))

local_modules_paths = [
    os.path.join(root_folder, "__app__"),
    os.path.join(root_folder, "__app__", "data", "python_modules")
]

for p in local_modules_paths:
    sys.path.insert(0, p)

# Insert Sphinx extensions to sys.path.
extensions_path = os.path.abspath(".")
sys.path.insert(0, extensions_path)

intersphinx_mapping_file_path = os.path.join(extensions_path, "intersphinx_mapping.py")

# I couldn't directly import this data from the extension code itself (freaking python's relative
# imports nonsense!!!), so I import it here and pass the data to the extension as an option
# dictionary. Moving on!!!
from python_modules.__init__ import __appdescription__
from python_modules.cli import docopt_doc as cinnamontools_docopt_doc

# ##############################################################################
# ########################### General configuration ############################
# ##############################################################################

# If your documentation needs a minimal Sphinx version, state it here.
needs_sphinx = "1.8.1"

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# rst is for all standard files.
# txt is for the coverage generated files.
source_suffix = [".rst", ".txt"]

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "Cinnamon Tools"
copyright = "2016-%s, Odyseus." % datetime.today().year
author = "Odyseus"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = ""
# The full version, including alpha/beta/rc tags.
release = ""

# The language for content auto generated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also affects html_static_path and html_extra_path
exclude_patterns = []

abbreviations_path = os.path.join(os.path.dirname(__file__),
                                  "common_rest_abbreviations",
                                  "abbreviations.restructuredtext")

if os.path.isfile(abbreviations_path):
    with open(abbreviations_path, "r") as abbr_file:
        rst_epilog = abbr_file.read()


# ##############################################################################
# ########################### Options for HTML output ##########################
# ##############################################################################

html_theme = "sphinx_rtd_theme_mod"

html_theme_path = ["."]

html_output_encoding = "utf-8"

html_favicon = "_static/cinnamon-logo.svg"

html_experimental_html5_writer = True

html_permalinks = True

html_permalinks_icon = "Â¶"

html_copy_source = True

html_show_sourcelink = True

html_show_copyright = True

html_show_sphinx = True

html_compact_lists = True

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# ##############################################################################
# ########################## Extensions settings ###############################
# ##############################################################################

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.coverage",
    "sphinx.ext.githubpages",
    "sphinx.ext.intersphinx",
    "sphinx.ext.napoleon",
    "sphinx.ext.todo",
    "sphinx.ext.viewcode",
    # My Sphinx extensions
    "sphinx_extensions.contextual_admonition",
    "sphinx_extensions.custom_literalinclude",
    "sphinx_extensions.docopt_docstrings"
]

# sphinx.ext.todo settings
todo_include_todos = True

# sphinx.ext.napoleon settings
napoleon_google_docstring = False
napoleon_numpy_docstring = True
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = True
napoleon_include_special_with_doc = True
napoleon_use_admonition_for_examples = True
napoleon_use_admonition_for_notes = True
napoleon_use_admonition_for_references = True
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_rtype = True


# sphinx.ext.coverage.
coverage_ignore_modules = ["common_modules.docopt", "common_modules.pyperclip"]


# sphinx_extensions.docopt_docstrings.
def extract_usage(doc_string):
    """Extract the Usage section from a docopt docstring.

    Parameters
    ----------
    doc_string : str
        The docopt doctring section.

    Returns
    -------
    str
        The Usage section of a docopt docstring.
    """
    usage = doc_string[doc_string.find("Usage:") + len("Usage:"):
                       doc_string.rfind("Options:")]
    return "\n".join([line[4:] for line in usage.splitlines()])


docopt_docstrings = {
    "cinnamontools": cinnamontools_docopt_doc,
}

# sphinx_extensions.custom_literalinclude.
custom_literalincludes = {
    "cinnamontools-usage": extract_usage(cinnamontools_docopt_doc),
}

# ##############################################################################
# ########################## SMACK SOME FREAKING SENCE #########################
# ##############################################################################

intersphinx_mapping = run_path(intersphinx_mapping_file_path)["intersphinx_mapping"]

# Python's docs don't change every week.
intersphinx_cache_limit = 90  # days
intersphinx_timeout = 10  # seconds


# include __init__ docstrings in class docstrings
autoclass_content = "both"

# Group method docstrings in sphinx
autodoc_member_order = "bysource"

# ##############################################################################
# ####################### Options for manual page output #######################
# ##############################################################################

man_pages = [
    ("includes/01-usage", "app.py", __appdescription__, [author], 1)
]

man_show_urls = True
